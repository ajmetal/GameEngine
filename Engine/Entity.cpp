#include "pch.h"
#include "Entity.h"

/******************************************************************************
******************************************************************************/
Entity::Entity()
    : m_name("")
    , m_isActive(true)
{ }

/******************************************************************************
******************************************************************************/
Entity::Entity(const char* name)
    : m_name(name)
    , m_isActive(true)
{ }

/******************************************************************************
******************************************************************************/
Entity::Entity(Entity& other)
    : m_isActive(other.m_isActive)
    , m_name(other.m_name)
    , m_components(other.m_components)
{ }

/******************************************************************************
******************************************************************************/
void Entity::operator=(Entity& other)
{
    this->m_isActive = other.m_isActive;
    this->m_name = other.m_name;
    this->m_components = other.m_components;
}

/******************************************************************************
******************************************************************************/
Entity::~Entity()
{
    Destroy();
}

/******************************************************************************
******************************************************************************/
void Entity::ListComponents()
{
    for (auto& component : m_components) {
        std::cout << component.second->ToString() << std::endl;
    }
}

/******************************************************************************
******************************************************************************/
void Entity::Update(const float& deltaTime)
{
    for (auto& component : m_components) {
        if (component.second->isActive()) {
            component.second->Update(deltaTime);
        }
    }
}

/******************************************************************************
******************************************************************************/
void Entity::Render()
{
    for (auto& component : m_components) {
        if (component.second->isActive()) {
            component.second->Render();
        }
    }
}

/******************************************************************************
******************************************************************************/
void Entity::Destroy()
{
    for (auto& component : m_components) {
        component.second->Destroy();
    }
}

/******************************************************************************
******************************************************************************/
bool Entity::Initialize()
{
    for (auto& i : m_components) {
        i.second->Initialize();
    }
    return false;
}

/******************************************************************************
******************************************************************************/
bool Entity::Start()
{
    for (auto& i : m_components) {
        i.second->Start();
    }
    return false;
}

/******************************************************************************
******************************************************************************/
bool Entity::SetActive(bool isActive)
{
    m_isActive = isActive;
    return m_isActive;
}

/******************************************************************************
******************************************************************************/
bool Entity::IsActive() const {
    return m_isActive;
}
