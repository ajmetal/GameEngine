#include "pch.h"

#include "Vector2.h"
#include <cmath>

/******************************************************************************
******************************************************************************/
Vector2::Vector2()
    : x(0.0f)
    , y(0.0f)
{}

/******************************************************************************
******************************************************************************/
Vector2::Vector2(float a, float b)
    : x(a)
    , y(b)
{}

/******************************************************************************
******************************************************************************/
float Vector2::Distance(Vector2 lhs, Vector2 rhs)
{
    float dx = (lhs.x - rhs.x);
    float dy = (lhs.y - rhs.y);
    return sqrtf(dx * dx + dy * dy);
}

/******************************************************************************
******************************************************************************/
Vector2 Vector2::Lerp(Vector2 v1, Vector2 v2, float amount)
{
    Vector2 result = { 0.f,0.0f };

    result.x = v1.x + amount * (v2.x - v1.x);
    result.y = v1.y + amount * (v2.y - v1.y);

    return result;
}

/******************************************************************************
******************************************************************************/
void Vector2::Normalize()
{
    float magnitude = Magnitude();
    if (magnitude == 0.0f) {
        return;
    }
    x /= magnitude;
    y /= magnitude;
}

/******************************************************************************
******************************************************************************/
Vector2 Vector2::Normalized() const
{
    float magnitude = Magnitude();
    if (magnitude == 0.0f) {
        return Vector2Zero();
    }
    return {x / magnitude, y / magnitude};
}

/******************************************************************************
******************************************************************************/
float Vector2::Magnitude() const
{
    return Distance(Vector2Zero(), *this);
}

/******************************************************************************
******************************************************************************/
float Vector2::Dot(Vector2 lhs, Vector2 rhs)
{
    return (
        lhs.x * rhs.x +
        lhs.y * rhs.y
    );
}

/******************************************************************************
* TODO: Re-learn wtf a cross product is
******************************************************************************/
Vector2 Vector2::Cross(const Vector2 lhs, const Vector2 rhs)
{
    return Vector2Zero();
}

/******************************************************************************
******************************************************************************/
Vector2 Vector2::Vector2Zero()
{
    return { 0.0f, 0.0f };
}

/******************************************************************************
******************************************************************************/
Vector2 Vector2::Vector2One()
{
    return { 1.0f, 1.0f };
}
